/*******************************************************************************
 *  Copyright 2012-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 *  this file except in compliance with the License. A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 *  or in the "license" file accompanying this file.
 *  This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 *  CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *  specific language governing permissions and limitations under the License.
 * *****************************************************************************
 *
 *  AWS Tools for Windows (TM) PowerShell (TM)
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;
using System.Text;
using Amazon.PowerShell.Common;
using Amazon.Runtime;
using Amazon.SecurityLake;
using Amazon.SecurityLake.Model;

namespace Amazon.PowerShell.Cmdlets.SLK
{
    /// <summary>
    /// Initializes an Amazon Security Lake instance with the provided (or default) configuration.
    /// You can enable Security Lake in Regions with customized settings in advance before
    /// enabling log collection in Regions. You can either use the <code>enableAll</code>
    /// parameter to specify all Regions or you can specify the Regions you want to enable
    /// Security Lake using the <code>Regions</code> parameter and configure these Regions
    /// using the <code>configurations</code> parameter. When the <code>CreateDataLake</code>
    /// API is called multiple times, if that Region is already enabled, it will update the
    /// Region if configuration for that Region is provided. If that Region is a new Region,
    /// it will be set up with the customized configurations if it is specified. 
    /// 
    ///  
    /// <para>
    /// When you enable Security Lake, it starts ingesting security data after the <code>CreateAwsLogSource</code>
    /// call. This includes ingesting security data from sources, storing data, and making
    /// data accessible to subscribers. Security Lake also enables all the existing settings
    /// and resources that it stores or maintains for your account in the current Region,
    /// including security log and event data. For more information, see the Amazon Security
    /// Lake User Guide.
    /// </para>
    /// </summary>
    [Cmdlet("New", "SLKDatalake", SupportsShouldProcess = true, ConfirmImpact = ConfirmImpact.Medium)]
    [OutputType("None")]
    [AWSCmdlet("Calls the Amazon Security Lake CreateDatalake API operation.", Operation = new[] {"CreateDatalake"}, SelectReturnType = typeof(Amazon.SecurityLake.Model.CreateDatalakeResponse))]
    [AWSCmdletOutput("None or Amazon.SecurityLake.Model.CreateDatalakeResponse",
        "This cmdlet does not generate any output." +
        "The service response (type Amazon.SecurityLake.Model.CreateDatalakeResponse) can be referenced from properties attached to the cmdlet entry in the $AWSHistory stack."
    )]
    public partial class NewSLKDatalakeCmdlet : AmazonSecurityLakeClientCmdlet, IExecutor
    {
        
        #region Parameter Configuration
        /// <summary>
        /// <para>
        /// <para>Enable Security Lake with the specified configurations settings to begin ingesting
        /// security data. </para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        [Alias("Configurations")]
        public System.Collections.Hashtable Configuration { get; set; }
        #endregion
        
        #region Parameter EnableAll
        /// <summary>
        /// <para>
        /// <para>Enable Security Lake in all Regions to begin ingesting security data.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(Position = 0, ValueFromPipelineByPropertyName = true, ValueFromPipeline = true)]
        public System.Boolean? EnableAll { get; set; }
        #endregion
        
        #region Parameter MetaStoreManagerRoleArn
        /// <summary>
        /// <para>
        /// <para>The Role ARN used to create and update the Glue table with partitions generated by
        /// ingestion and normalization of Amazon Web Services log sources and custom sources.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String MetaStoreManagerRoleArn { get; set; }
        #endregion
        
        #region Parameter InputRegion
        /// <summary>
        /// <para>
        /// <para>Enable Security Lake in the specified Regions to begin ingesting security data. To
        /// enable Security Lake in specific Amazon Web Services Regions, such as us-east-1 or
        /// ap-northeast-3, provide the Region codes. For a list of Region codes, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints">Region
        /// codes</a> in the Amazon Web Services General Reference.</para>
        /// </para>
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public System.String[] InputRegion { get; set; }
        #endregion
        
        #region Parameter Select
        /// <summary>
        /// Use the -Select parameter to control the cmdlet output. The cmdlet doesn't have a return value by default.
        /// Specifying -Select '*' will result in the cmdlet returning the whole service response (Amazon.SecurityLake.Model.CreateDatalakeResponse).
        /// Specifying -Select '^ParameterName' will result in the cmdlet returning the selected cmdlet parameter value.
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public string Select { get; set; } = "*";
        #endregion
        
        #region Parameter PassThru
        /// <summary>
        /// Changes the cmdlet behavior to return the value passed to the EnableAll parameter.
        /// The -PassThru parameter is deprecated, use -Select '^EnableAll' instead. This parameter will be removed in a future version.
        /// </summary>
        [System.Obsolete("The -PassThru parameter is deprecated, use -Select '^EnableAll' instead. This parameter will be removed in a future version.")]
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public SwitchParameter PassThru { get; set; }
        #endregion
        
        #region Parameter Force
        /// <summary>
        /// This parameter overrides confirmation prompts to force 
        /// the cmdlet to continue its operation. This parameter should always
        /// be used with caution.
        /// </summary>
        [System.Management.Automation.Parameter(ValueFromPipelineByPropertyName = true)]
        public SwitchParameter Force { get; set; }
        #endregion
        
        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            
            var resourceIdentifiersText = FormatParameterValuesForConfirmationMsg(nameof(this.EnableAll), MyInvocation.BoundParameters);
            if (!ConfirmShouldProceed(this.Force.IsPresent, resourceIdentifiersText, "New-SLKDatalake (CreateDatalake)"))
            {
                return;
            }
            
            var context = new CmdletContext();
            
            // allow for manipulation of parameters prior to loading into context
            PreExecutionContextLoad(context);
            
            #pragma warning disable CS0618, CS0612 //A class member was marked with the Obsolete attribute
            if (ParameterWasBound(nameof(this.Select)))
            {
                context.Select = CreateSelectDelegate<Amazon.SecurityLake.Model.CreateDatalakeResponse, NewSLKDatalakeCmdlet>(Select) ??
                    throw new System.ArgumentException("Invalid value for -Select parameter.", nameof(this.Select));
                if (this.PassThru.IsPresent)
                {
                    throw new System.ArgumentException("-PassThru cannot be used when -Select is specified.", nameof(this.Select));
                }
            }
            else if (this.PassThru.IsPresent)
            {
                context.Select = (response, cmdlet) => this.EnableAll;
            }
            #pragma warning restore CS0618, CS0612 //A class member was marked with the Obsolete attribute
            if (this.Configuration != null)
            {
                context.Configuration = new Dictionary<System.String, Amazon.SecurityLake.Model.LakeConfigurationRequest>(StringComparer.Ordinal);
                foreach (var hashKey in this.Configuration.Keys)
                {
                    context.Configuration.Add((String)hashKey, (LakeConfigurationRequest)(this.Configuration[hashKey]));
                }
            }
            context.EnableAll = this.EnableAll;
            context.MetaStoreManagerRoleArn = this.MetaStoreManagerRoleArn;
            if (this.InputRegion != null)
            {
                context.InputRegion = new List<System.String>(this.InputRegion);
            }
            
            // allow further manipulation of loaded context prior to processing
            PostExecutionContextLoad(context);
            
            var output = Execute(context) as CmdletOutput;
            ProcessOutput(output);
        }
        
        #region IExecutor Members
        
        public object Execute(ExecutorContext context)
        {
            var cmdletContext = context as CmdletContext;
            // create request
            var request = new Amazon.SecurityLake.Model.CreateDatalakeRequest();
            
            if (cmdletContext.Configuration != null)
            {
                request.Configurations = cmdletContext.Configuration;
            }
            if (cmdletContext.EnableAll != null)
            {
                request.EnableAll = cmdletContext.EnableAll.Value;
            }
            if (cmdletContext.MetaStoreManagerRoleArn != null)
            {
                request.MetaStoreManagerRoleArn = cmdletContext.MetaStoreManagerRoleArn;
            }
            if (cmdletContext.InputRegion != null)
            {
                request.Regions = cmdletContext.InputRegion;
            }
            
            CmdletOutput output;
            
            // issue call
            var client = Client ?? CreateClient(_CurrentCredentials, _RegionEndpoint);
            try
            {
                var response = CallAWSServiceOperation(client, request);
                object pipelineOutput = null;
                pipelineOutput = cmdletContext.Select(response, this);
                output = new CmdletOutput
                {
                    PipelineOutput = pipelineOutput,
                    ServiceResponse = response
                };
            }
            catch (Exception e)
            {
                output = new CmdletOutput { ErrorResponse = e };
            }
            
            return output;
        }
        
        public ExecutorContext CreateContext()
        {
            return new CmdletContext();
        }
        
        #endregion
        
        #region AWS Service Operation Call
        
        private Amazon.SecurityLake.Model.CreateDatalakeResponse CallAWSServiceOperation(IAmazonSecurityLake client, Amazon.SecurityLake.Model.CreateDatalakeRequest request)
        {
            Utils.Common.WriteVerboseEndpointMessage(this, client.Config, "Amazon Security Lake", "CreateDatalake");
            try
            {
                #if DESKTOP
                return client.CreateDatalake(request);
                #elif CORECLR
                return client.CreateDatalakeAsync(request).GetAwaiter().GetResult();
                #else
                        #error "Unknown build edition"
                #endif
            }
            catch (AmazonServiceException exc)
            {
                var webException = exc.InnerException as System.Net.WebException;
                if (webException != null)
                {
                    throw new Exception(Utils.Common.FormatNameResolutionFailureMessage(client.Config, webException.Message), webException);
                }
                throw;
            }
        }
        
        #endregion
        
        internal partial class CmdletContext : ExecutorContext
        {
            public Dictionary<System.String, Amazon.SecurityLake.Model.LakeConfigurationRequest> Configuration { get; set; }
            public System.Boolean? EnableAll { get; set; }
            public System.String MetaStoreManagerRoleArn { get; set; }
            public List<System.String> InputRegion { get; set; }
            public System.Func<Amazon.SecurityLake.Model.CreateDatalakeResponse, NewSLKDatalakeCmdlet, object> Select { get; set; } =
                (response, cmdlet) => null;
        }
        
    }
}
